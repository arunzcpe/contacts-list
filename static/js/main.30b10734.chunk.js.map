{"version":3,"sources":["Header.js","Contactlist.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","siteName","ContactList","state","query","contact","this","onDeleteContact","userInput","setState","trim","showingContacts","match","RegExp","escapeRegexp","contacts","filter","test","name","sort","sortBy","type","placeholder","autoComplete","value","onChange","event","updateContact","target","map","index","key","email","phone","onClick","handleDelete","Component","App","removeContact","c","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAaeA,MAXf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,wCACX,yBAAKA,UAAU,4CACX,uBAAGC,KAAK,IAAID,UAAU,0CAClB,gCAASD,EAAMG,c,gCC+DpBC,E,2MA/DXC,MAAQ,CACJC,MAAO,I,4EAGEC,GACTC,KAAKR,MAAMS,gBAAgBF,K,oCAEjBG,GACVF,KAAKG,SAAS,CACVL,MAAOI,EAAUE,W,+BAGf,IACFC,EADC,OAGL,GAAIL,KAAKH,MAAMC,MAAO,CAElB,IAAMQ,EAAQ,IAAIC,OAAOC,IAAaR,KAAKH,MAAMC,MAAO,MAExDO,EAAkBL,KAAKR,MAAMiB,SAASC,QAAO,SAACX,GAC1C,OAAOO,EAAMK,KAAKZ,EAAQa,cAI9BP,EAAkBL,KAAKR,MAAMiB,SAKjC,OAFAJ,EAAgBQ,KAAKC,IAAO,SAGxB,6BACI,yBAAKrB,UAAU,cACX,2BAAOsB,KAAK,OACRH,KAAK,SACLnB,UAAU,gCACVuB,YAAY,kBACZC,aAAa,MACbC,MAAOlB,KAAKH,MAAMC,MAClBqB,SAAU,SAACC,GAAD,OAAW,EAAKC,cAAcD,EAAME,OAAOJ,WAE5Db,EAAgBkB,KAAI,SAACxB,EAASyB,GAAV,OACjB,yBAAK/B,UAAU,6BAA6BgC,IAAKD,GAC7C,wBAAI/B,UAAU,+CAA+CM,EAAQa,MACrE,yBAAKnB,UAAU,aACX,yBAAKA,UAAU,cAAcM,EAAQ2B,OACrC,yBAAKjC,UAAU,cAAcM,EAAQ4B,QAGzC,yBAAKlC,UAAU,gDACX,4BAAQA,UAAU,wBACdmC,QAAS,kBAAM,EAAKC,aAAa9B,KADrC,oB,GAlDF+B,aCkEXC,E,2MAhEblC,MAAQ,CACNY,SAAU,CACR,CACEG,KAAM,aACNc,MAAO,kBACPC,MAAO,YAET,CACEf,KAAM,kBACNc,MAAO,mBACPC,MAAO,YAET,CACEf,KAAM,gBACNc,MAAO,kBACPC,MAAO,YAET,CACEf,KAAM,qBACNc,MAAO,mBACPC,MAAO,YAET,CACEf,KAAM,YACNc,MAAO,iBACPC,MAAO,YAET,CACEf,KAAM,mBACNc,MAAO,iBACPC,MAAO,YAET,CACEf,KAAM,oBACNc,MAAO,kBACPC,MAAO,YAET,CACEf,KAAM,UACNc,MAAO,kBACPC,MAAO,c,EAKbK,cAAgB,SAACjC,GACf,EAAKI,UAAS,SAACN,GAAD,MAAY,CACxBY,SAAUZ,EAAMY,SAASC,QAAO,SAAAuB,GAAC,OAAIA,EAAErB,OAASb,EAAQa,a,wEAIlD,IACAH,EAAaT,KAAKH,MAAlBY,SACR,OACE,6BACE,kBAAC,EAAD,CAAQd,SAAS,iBACjB,yBAAKF,UAAU,kBACb,kBAAC,EAAD,CAAagB,SAAUA,EAAUR,gBAAiBD,KAAKgC,sB,GA3D/CF,aCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2DCZNgC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.30b10734.chunk.js","sourcesContent":["import React from 'react';\r\n//Functional Component\r\nfunction Header(props) {\r\n    return (\r\n        <div className=\"navbar navbar-dark bg-dark shadow-sm\">\r\n            <div className=\"container d-flex justify-content-between\">\r\n                <a href=\"/\" className=\"navbar-brand d-flex align-items-center\">\r\n                    <strong>{props.siteName}</strong>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport escapeRegexp from 'escape-string-regexp';\r\nimport sortBy from 'sort-by';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass ContactList extends Component {\r\n    state = {\r\n        query: ''\r\n    }\r\n\r\n    handleDelete(contact) {\r\n        this.props.onDeleteContact(contact);\r\n    }\r\n    updateContact(userInput) {\r\n        this.setState({\r\n            query: userInput.trim()\r\n        });\r\n    }\r\n    render() {\r\n        let showingContacts;\r\n        //If the user searches,\r\n        if (this.state.query) {\r\n            //filter | changeState\r\n            const match = new RegExp(escapeRegexp(this.state.query, 'i'));//escapes spl chars to the regexp context\r\n            //match.test('Arun') \r\n            showingContacts = this.props.contacts.filter((contact) => {\r\n                return match.test(contact.name)\r\n            })\r\n\r\n        } else {\r\n            showingContacts = this.props.contacts;\r\n        }\r\n        //Sorting\r\n        showingContacts.sort(sortBy('name'));\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\"\r\n                        name=\"search\"\r\n                        className=\"form-control border-secondary\"\r\n                        placeholder=\"Search Contacts\"\r\n                        autoComplete=\"off\"\r\n                        value={this.state.query}\r\n                        onChange={(event) => this.updateContact(event.target.value)} />\r\n                </div>\r\n                {showingContacts.map((contact, index) => (\r\n                    <div className=\"card border-secondary mb-3\" key={index}>\r\n                        <h4 className=\"card-header border-secondary bg-transparent\">{contact.name}</h4>\r\n                        <div className=\"card-body\">\r\n                            <div className=\"card-title\">{contact.email}</div>\r\n                            <div className=\"card-title\">{contact.phone}</div>\r\n\r\n                        </div>\r\n                        <div className=\"card-footer border-secondary bg-transparent \">\r\n                            <button className=\"btn btn-sm btn-danger\"\r\n                                onClick={() => this.handleDelete(contact)}>Delete</button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n//Component's TypeChecking\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired\r\n}\r\nexport default ContactList;","import React, { Component } from 'react';\nimport Header from './Header';\nimport ContactList from './Contactlist';\n\n\n\nclass App extends Component {\n  //Default State\n  state = {\n    contacts: [\n      {\n        name: 'Debra Pauh',\n        email: 'debra@gmail.com',\n        phone: 1234567890\n      },\n      {\n        name: 'Ismail Sulaiman',\n        email: 'ismail@gmail.com',\n        phone: 1234567890\n      },\n      {\n        name: 'Ahmed Zulhimi',\n        email: 'ahmed@gmail.com',\n        phone: 1234567890\n      },\n      {\n        name: 'Kesava Kumar Raman',\n        email: 'kesava@gmail.com',\n        phone: 1234567890\n      },\n      {\n        name: 'Aina Azmi',\n        email: 'aina@gmail.com',\n        phone: 1234567890\n      },\n      {\n        name: 'Arun Arichandran',\n        email: 'arun@gmail.com',\n        phone: 1234567890\n      },\n      {\n        name: 'Saran Arichandran',\n        email: 'sarav@gmail.com',\n        phone: 1234567890\n      },\n      {\n        name: \"O'relly\",\n        email: 'ahmed@gmail.com',\n        phone: 1234567890\n      },\n    ]\n  }\n\n  removeContact = (contact) => {\n    this.setState((state) => ({\n      contacts: state.contacts.filter(c => c.name !== contact.name)\n    }));\n  }\n\n  render() {\n    const { contacts } = this.state;\n    return (\n      <div>\n        <Header siteName=\"ListContacts\" />\n        <div className=\"container mt-3\">\n          <ContactList contacts={contacts} onDeleteContact={this.removeContact} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}